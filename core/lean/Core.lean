import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.Tactic
import Mathlib.Data.Real.Basic

open CategoryTheory

universe u

/--
`EpsFunctor d Œµ` is an *Œµ‚Äëfunctor* between categories `C` and `D`.  Instead of preserving
composition and identities strictly, it does so *up to a numerical error*¬†`Œµ`, measured by the
user‚Äësupplied *distortion metric*¬†`d` on morphisms of `D`.

* `d f g` should be thought of as the "distance" between two parallel morphisms `f` and `g` in
 ¬†`D`.  No axioms on `d` are required‚Äîany real‚Äëvalued function will do‚Äîbut typical examples are
 ¬†metrics coming from a norm or an absolute value.
* When `Œµ = 0` and `d` is the discrete metric, an `EpsFunctor` is just an ordinary functor.
* If `Œµ = 0` but `d` is non‚Äëtrivial, we obtain *isometric* functors, useful in analysis.
-/
structure EpsFunctor
    {C D : Type u} [Category C] [Category D]
    (d : {A B : D} ‚Üí (A ‚ü∂ B) ‚Üí (A ‚ü∂ B) ‚Üí ‚Ñù)
    (Œµ : ‚Ñù) : Type (max u (u+1)) where
  /-- Object mapping. -/
  objMap : C ‚Üí D
  /-- Morphism mapping. -/
  map    : {A B : C} ‚Üí (A ‚ü∂ B) ‚Üí (objMap A ‚ü∂ objMap B)
  /-- Composition is preserved *up to* `Œµ`. -/
  comp_ok : ‚àÄ {A B C‚ÇÅ : C} (f : A ‚ü∂ B) (g : B ‚ü∂ C‚ÇÅ),
      d (map (g ‚â´ f)) ((map f) ‚â´ (map g)) ‚â§ Œµ
  /-- Identities are preserved *up to* `Œµ`. -/
  id_ok   : ‚àÄ {A : C}, d (map (ùüô A)) (ùüô (objMap A)) ‚â§ Œµ

attribute [simp] EpsFunctor.objMap
attribute [simp] EpsFunctor.map

namespace EpsFunctor

variable {C D : Type u} [Category C] [Category D]
variable {d : {A B : D} ‚Üí (A ‚ü∂ B) ‚Üí (A ‚ü∂ B) ‚Üí ‚Ñù} {Œµ : ‚Ñù}

/-- A strict functor is automatically a `0`‚ÄëŒµ functor. -/
@[simp]
def fromStrict
    (F : C ‚•§ D) (d)
    [‚àÄ {A B : D} (f : A ‚ü∂ B), Decidable (d f f = 0)] :
    EpsFunctor d 0 where
  objMap := F.obj
  map    := @fun A B f => F.map f
  comp_ok := by
    intro A B C‚ÇÅ f g
    simp [F.map_comp]
  id_ok := by
    intro A
    simp [F.map_id]

end EpsFunctor